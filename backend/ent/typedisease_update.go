// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Pichais/app/ent/predicate"
	"github.com/Pichais/app/ent/spaciality"
	"github.com/Pichais/app/ent/typedisease"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TypeDiseaseUpdate is the builder for updating TypeDisease entities.
type TypeDiseaseUpdate struct {
	config
	hooks      []Hook
	mutation   *TypeDiseaseMutation
	predicates []predicate.TypeDisease
}

// Where adds a new predicate for the builder.
func (tdu *TypeDiseaseUpdate) Where(ps ...predicate.TypeDisease) *TypeDiseaseUpdate {
	tdu.predicates = append(tdu.predicates, ps...)
	return tdu
}

// SetDiseaseName sets the DiseaseName field.
func (tdu *TypeDiseaseUpdate) SetDiseaseName(s string) *TypeDiseaseUpdate {
	tdu.mutation.SetDiseaseName(s)
	return tdu
}

// AddFortypeIDs adds the fortype edge to Spaciality by ids.
func (tdu *TypeDiseaseUpdate) AddFortypeIDs(ids ...int) *TypeDiseaseUpdate {
	tdu.mutation.AddFortypeIDs(ids...)
	return tdu
}

// AddFortype adds the fortype edges to Spaciality.
func (tdu *TypeDiseaseUpdate) AddFortype(s ...*Spaciality) *TypeDiseaseUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tdu.AddFortypeIDs(ids...)
}

// Mutation returns the TypeDiseaseMutation object of the builder.
func (tdu *TypeDiseaseUpdate) Mutation() *TypeDiseaseMutation {
	return tdu.mutation
}

// RemoveFortypeIDs removes the fortype edge to Spaciality by ids.
func (tdu *TypeDiseaseUpdate) RemoveFortypeIDs(ids ...int) *TypeDiseaseUpdate {
	tdu.mutation.RemoveFortypeIDs(ids...)
	return tdu
}

// RemoveFortype removes fortype edges to Spaciality.
func (tdu *TypeDiseaseUpdate) RemoveFortype(s ...*Spaciality) *TypeDiseaseUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tdu.RemoveFortypeIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tdu *TypeDiseaseUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := tdu.mutation.DiseaseName(); ok {
		if err := typedisease.DiseaseNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "DiseaseName", err: fmt.Errorf("ent: validator failed for field \"DiseaseName\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(tdu.hooks) == 0 {
		affected, err = tdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TypeDiseaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tdu.mutation = mutation
			affected, err = tdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tdu.hooks) - 1; i >= 0; i-- {
			mut = tdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TypeDiseaseUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TypeDiseaseUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TypeDiseaseUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tdu *TypeDiseaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   typedisease.Table,
			Columns: typedisease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: typedisease.FieldID,
			},
		},
	}
	if ps := tdu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.DiseaseName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typedisease.FieldDiseaseName,
		})
	}
	if nodes := tdu.mutation.RemovedFortypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typedisease.FortypeTable,
			Columns: []string{typedisease.FortypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spaciality.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.FortypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typedisease.FortypeTable,
			Columns: []string{typedisease.FortypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spaciality.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{typedisease.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TypeDiseaseUpdateOne is the builder for updating a single TypeDisease entity.
type TypeDiseaseUpdateOne struct {
	config
	hooks    []Hook
	mutation *TypeDiseaseMutation
}

// SetDiseaseName sets the DiseaseName field.
func (tduo *TypeDiseaseUpdateOne) SetDiseaseName(s string) *TypeDiseaseUpdateOne {
	tduo.mutation.SetDiseaseName(s)
	return tduo
}

// AddFortypeIDs adds the fortype edge to Spaciality by ids.
func (tduo *TypeDiseaseUpdateOne) AddFortypeIDs(ids ...int) *TypeDiseaseUpdateOne {
	tduo.mutation.AddFortypeIDs(ids...)
	return tduo
}

// AddFortype adds the fortype edges to Spaciality.
func (tduo *TypeDiseaseUpdateOne) AddFortype(s ...*Spaciality) *TypeDiseaseUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tduo.AddFortypeIDs(ids...)
}

// Mutation returns the TypeDiseaseMutation object of the builder.
func (tduo *TypeDiseaseUpdateOne) Mutation() *TypeDiseaseMutation {
	return tduo.mutation
}

// RemoveFortypeIDs removes the fortype edge to Spaciality by ids.
func (tduo *TypeDiseaseUpdateOne) RemoveFortypeIDs(ids ...int) *TypeDiseaseUpdateOne {
	tduo.mutation.RemoveFortypeIDs(ids...)
	return tduo
}

// RemoveFortype removes fortype edges to Spaciality.
func (tduo *TypeDiseaseUpdateOne) RemoveFortype(s ...*Spaciality) *TypeDiseaseUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tduo.RemoveFortypeIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tduo *TypeDiseaseUpdateOne) Save(ctx context.Context) (*TypeDisease, error) {
	if v, ok := tduo.mutation.DiseaseName(); ok {
		if err := typedisease.DiseaseNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "DiseaseName", err: fmt.Errorf("ent: validator failed for field \"DiseaseName\": %w", err)}
		}
	}

	var (
		err  error
		node *TypeDisease
	)
	if len(tduo.hooks) == 0 {
		node, err = tduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TypeDiseaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tduo.mutation = mutation
			node, err = tduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tduo.hooks) - 1; i >= 0; i-- {
			mut = tduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TypeDiseaseUpdateOne) SaveX(ctx context.Context) *TypeDisease {
	td, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return td
}

// Exec executes the query on the entity.
func (tduo *TypeDiseaseUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TypeDiseaseUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tduo *TypeDiseaseUpdateOne) sqlSave(ctx context.Context) (td *TypeDisease, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   typedisease.Table,
			Columns: typedisease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: typedisease.FieldID,
			},
		},
	}
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TypeDisease.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tduo.mutation.DiseaseName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typedisease.FieldDiseaseName,
		})
	}
	if nodes := tduo.mutation.RemovedFortypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typedisease.FortypeTable,
			Columns: []string{typedisease.FortypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spaciality.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.FortypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typedisease.FortypeTable,
			Columns: []string{typedisease.FortypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spaciality.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	td = &TypeDisease{config: tduo.config}
	_spec.Assign = td.assignValues
	_spec.ScanValues = td.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{typedisease.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return td, nil
}
