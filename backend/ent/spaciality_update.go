// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Pichais/app/ent/organ"
	"github.com/Pichais/app/ent/physician"
	"github.com/Pichais/app/ent/predicate"
	"github.com/Pichais/app/ent/spaciality"
	"github.com/Pichais/app/ent/typedisease"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SpacialityUpdate is the builder for updating Spaciality entities.
type SpacialityUpdate struct {
	config
	hooks      []Hook
	mutation   *SpacialityMutation
	predicates []predicate.Spaciality
}

// Where adds a new predicate for the builder.
func (su *SpacialityUpdate) Where(ps ...predicate.Spaciality) *SpacialityUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetUserID sets the user edge to Physician by id.
func (su *SpacialityUpdate) SetUserID(id int) *SpacialityUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetNillableUserID sets the user edge to Physician by id if the given value is not nil.
func (su *SpacialityUpdate) SetNillableUserID(id *int) *SpacialityUpdate {
	if id != nil {
		su = su.SetUserID(*id)
	}
	return su
}

// SetUser sets the user edge to Physician.
func (su *SpacialityUpdate) SetUser(p *Physician) *SpacialityUpdate {
	return su.SetUserID(p.ID)
}

// SetOganID sets the ogan edge to Organ by id.
func (su *SpacialityUpdate) SetOganID(id int) *SpacialityUpdate {
	su.mutation.SetOganID(id)
	return su
}

// SetNillableOganID sets the ogan edge to Organ by id if the given value is not nil.
func (su *SpacialityUpdate) SetNillableOganID(id *int) *SpacialityUpdate {
	if id != nil {
		su = su.SetOganID(*id)
	}
	return su
}

// SetOgan sets the ogan edge to Organ.
func (su *SpacialityUpdate) SetOgan(o *Organ) *SpacialityUpdate {
	return su.SetOganID(o.ID)
}

// SetTypeID sets the type edge to TypeDisease by id.
func (su *SpacialityUpdate) SetTypeID(id int) *SpacialityUpdate {
	su.mutation.SetTypeID(id)
	return su
}

// SetNillableTypeID sets the type edge to TypeDisease by id if the given value is not nil.
func (su *SpacialityUpdate) SetNillableTypeID(id *int) *SpacialityUpdate {
	if id != nil {
		su = su.SetTypeID(*id)
	}
	return su
}

// SetType sets the type edge to TypeDisease.
func (su *SpacialityUpdate) SetType(t *TypeDisease) *SpacialityUpdate {
	return su.SetTypeID(t.ID)
}

// Mutation returns the SpacialityMutation object of the builder.
func (su *SpacialityUpdate) Mutation() *SpacialityMutation {
	return su.mutation
}

// ClearUser clears the user edge to Physician.
func (su *SpacialityUpdate) ClearUser() *SpacialityUpdate {
	su.mutation.ClearUser()
	return su
}

// ClearOgan clears the ogan edge to Organ.
func (su *SpacialityUpdate) ClearOgan() *SpacialityUpdate {
	su.mutation.ClearOgan()
	return su
}

// ClearType clears the type edge to TypeDisease.
func (su *SpacialityUpdate) ClearType() *SpacialityUpdate {
	su.mutation.ClearType()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SpacialityUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpacialityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpacialityUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpacialityUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpacialityUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SpacialityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spaciality.Table,
			Columns: spaciality.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spaciality.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.UserTable,
			Columns: []string{spaciality.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.UserTable,
			Columns: []string{spaciality.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OganCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.OganTable,
			Columns: []string{spaciality.OganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organ.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.OganTable,
			Columns: []string{spaciality.OganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organ.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.TypeTable,
			Columns: []string{spaciality.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typedisease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.TypeTable,
			Columns: []string{spaciality.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typedisease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spaciality.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SpacialityUpdateOne is the builder for updating a single Spaciality entity.
type SpacialityUpdateOne struct {
	config
	hooks    []Hook
	mutation *SpacialityMutation
}

// SetUserID sets the user edge to Physician by id.
func (suo *SpacialityUpdateOne) SetUserID(id int) *SpacialityUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetNillableUserID sets the user edge to Physician by id if the given value is not nil.
func (suo *SpacialityUpdateOne) SetNillableUserID(id *int) *SpacialityUpdateOne {
	if id != nil {
		suo = suo.SetUserID(*id)
	}
	return suo
}

// SetUser sets the user edge to Physician.
func (suo *SpacialityUpdateOne) SetUser(p *Physician) *SpacialityUpdateOne {
	return suo.SetUserID(p.ID)
}

// SetOganID sets the ogan edge to Organ by id.
func (suo *SpacialityUpdateOne) SetOganID(id int) *SpacialityUpdateOne {
	suo.mutation.SetOganID(id)
	return suo
}

// SetNillableOganID sets the ogan edge to Organ by id if the given value is not nil.
func (suo *SpacialityUpdateOne) SetNillableOganID(id *int) *SpacialityUpdateOne {
	if id != nil {
		suo = suo.SetOganID(*id)
	}
	return suo
}

// SetOgan sets the ogan edge to Organ.
func (suo *SpacialityUpdateOne) SetOgan(o *Organ) *SpacialityUpdateOne {
	return suo.SetOganID(o.ID)
}

// SetTypeID sets the type edge to TypeDisease by id.
func (suo *SpacialityUpdateOne) SetTypeID(id int) *SpacialityUpdateOne {
	suo.mutation.SetTypeID(id)
	return suo
}

// SetNillableTypeID sets the type edge to TypeDisease by id if the given value is not nil.
func (suo *SpacialityUpdateOne) SetNillableTypeID(id *int) *SpacialityUpdateOne {
	if id != nil {
		suo = suo.SetTypeID(*id)
	}
	return suo
}

// SetType sets the type edge to TypeDisease.
func (suo *SpacialityUpdateOne) SetType(t *TypeDisease) *SpacialityUpdateOne {
	return suo.SetTypeID(t.ID)
}

// Mutation returns the SpacialityMutation object of the builder.
func (suo *SpacialityUpdateOne) Mutation() *SpacialityMutation {
	return suo.mutation
}

// ClearUser clears the user edge to Physician.
func (suo *SpacialityUpdateOne) ClearUser() *SpacialityUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// ClearOgan clears the ogan edge to Organ.
func (suo *SpacialityUpdateOne) ClearOgan() *SpacialityUpdateOne {
	suo.mutation.ClearOgan()
	return suo
}

// ClearType clears the type edge to TypeDisease.
func (suo *SpacialityUpdateOne) ClearType() *SpacialityUpdateOne {
	suo.mutation.ClearType()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SpacialityUpdateOne) Save(ctx context.Context) (*Spaciality, error) {

	var (
		err  error
		node *Spaciality
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpacialityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpacialityUpdateOne) SaveX(ctx context.Context) *Spaciality {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SpacialityUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpacialityUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SpacialityUpdateOne) sqlSave(ctx context.Context) (s *Spaciality, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spaciality.Table,
			Columns: spaciality.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spaciality.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Spaciality.ID for update")}
	}
	_spec.Node.ID.Value = id
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.UserTable,
			Columns: []string{spaciality.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.UserTable,
			Columns: []string{spaciality.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OganCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.OganTable,
			Columns: []string{spaciality.OganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organ.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.OganTable,
			Columns: []string{spaciality.OganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organ.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.TypeTable,
			Columns: []string{spaciality.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typedisease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.TypeTable,
			Columns: []string{spaciality.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typedisease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Spaciality{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spaciality.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
