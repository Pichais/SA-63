// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Pichais/app/ent/typedisease"
	"github.com/facebookincubator/ent/dialect/sql"
)

// TypeDisease is the model entity for the TypeDisease schema.
type TypeDisease struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DiseaseName holds the value of the "DiseaseName" field.
	DiseaseName string `json:"DiseaseName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TypeDiseaseQuery when eager-loading is set.
	Edges TypeDiseaseEdges `json:"edges"`
}

// TypeDiseaseEdges holds the relations/edges for other nodes in the graph.
type TypeDiseaseEdges struct {
	// Fortype holds the value of the fortype edge.
	Fortype []*Spaciality
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FortypeOrErr returns the Fortype value or an error if the edge
// was not loaded in eager-loading.
func (e TypeDiseaseEdges) FortypeOrErr() ([]*Spaciality, error) {
	if e.loadedTypes[0] {
		return e.Fortype, nil
	}
	return nil, &NotLoadedError{edge: "fortype"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TypeDisease) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // DiseaseName
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TypeDisease fields.
func (td *TypeDisease) assignValues(values ...interface{}) error {
	if m, n := len(values), len(typedisease.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	td.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field DiseaseName", values[0])
	} else if value.Valid {
		td.DiseaseName = value.String
	}
	return nil
}

// QueryFortype queries the fortype edge of the TypeDisease.
func (td *TypeDisease) QueryFortype() *SpacialityQuery {
	return (&TypeDiseaseClient{config: td.config}).QueryFortype(td)
}

// Update returns a builder for updating this TypeDisease.
// Note that, you need to call TypeDisease.Unwrap() before calling this method, if this TypeDisease
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TypeDisease) Update() *TypeDiseaseUpdateOne {
	return (&TypeDiseaseClient{config: td.config}).UpdateOne(td)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (td *TypeDisease) Unwrap() *TypeDisease {
	tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TypeDisease is not a transactional entity")
	}
	td.config.driver = tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TypeDisease) String() string {
	var builder strings.Builder
	builder.WriteString("TypeDisease(")
	builder.WriteString(fmt.Sprintf("id=%v", td.ID))
	builder.WriteString(", DiseaseName=")
	builder.WriteString(td.DiseaseName)
	builder.WriteByte(')')
	return builder.String()
}

// TypeDiseases is a parsable slice of TypeDisease.
type TypeDiseases []*TypeDisease

func (td TypeDiseases) config(cfg config) {
	for _i := range td {
		td[_i].config = cfg
	}
}
