// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Pichais/app/ent/organ"
	"github.com/Pichais/app/ent/predicate"
	"github.com/Pichais/app/ent/spaciality"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// OrganUpdate is the builder for updating Organ entities.
type OrganUpdate struct {
	config
	hooks      []Hook
	mutation   *OrganMutation
	predicates []predicate.Organ
}

// Where adds a new predicate for the builder.
func (ou *OrganUpdate) Where(ps ...predicate.Organ) *OrganUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetOrganName sets the OrganName field.
func (ou *OrganUpdate) SetOrganName(s string) *OrganUpdate {
	ou.mutation.SetOrganName(s)
	return ou
}

// AddForoganIDs adds the forogan edge to Spaciality by ids.
func (ou *OrganUpdate) AddForoganIDs(ids ...int) *OrganUpdate {
	ou.mutation.AddForoganIDs(ids...)
	return ou
}

// AddForogan adds the forogan edges to Spaciality.
func (ou *OrganUpdate) AddForogan(s ...*Spaciality) *OrganUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.AddForoganIDs(ids...)
}

// Mutation returns the OrganMutation object of the builder.
func (ou *OrganUpdate) Mutation() *OrganMutation {
	return ou.mutation
}

// RemoveForoganIDs removes the forogan edge to Spaciality by ids.
func (ou *OrganUpdate) RemoveForoganIDs(ids ...int) *OrganUpdate {
	ou.mutation.RemoveForoganIDs(ids...)
	return ou
}

// RemoveForogan removes forogan edges to Spaciality.
func (ou *OrganUpdate) RemoveForogan(s ...*Spaciality) *OrganUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.RemoveForoganIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OrganUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ou.mutation.OrganName(); ok {
		if err := organ.OrganNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "OrganName", err: fmt.Errorf("ent: validator failed for field \"OrganName\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrganUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organ.Table,
			Columns: organ.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organ.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OrganName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organ.FieldOrganName,
		})
	}
	if nodes := ou.mutation.RemovedForoganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organ.ForoganTable,
			Columns: []string{organ.ForoganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spaciality.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ForoganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organ.ForoganTable,
			Columns: []string{organ.ForoganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spaciality.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organ.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrganUpdateOne is the builder for updating a single Organ entity.
type OrganUpdateOne struct {
	config
	hooks    []Hook
	mutation *OrganMutation
}

// SetOrganName sets the OrganName field.
func (ouo *OrganUpdateOne) SetOrganName(s string) *OrganUpdateOne {
	ouo.mutation.SetOrganName(s)
	return ouo
}

// AddForoganIDs adds the forogan edge to Spaciality by ids.
func (ouo *OrganUpdateOne) AddForoganIDs(ids ...int) *OrganUpdateOne {
	ouo.mutation.AddForoganIDs(ids...)
	return ouo
}

// AddForogan adds the forogan edges to Spaciality.
func (ouo *OrganUpdateOne) AddForogan(s ...*Spaciality) *OrganUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.AddForoganIDs(ids...)
}

// Mutation returns the OrganMutation object of the builder.
func (ouo *OrganUpdateOne) Mutation() *OrganMutation {
	return ouo.mutation
}

// RemoveForoganIDs removes the forogan edge to Spaciality by ids.
func (ouo *OrganUpdateOne) RemoveForoganIDs(ids ...int) *OrganUpdateOne {
	ouo.mutation.RemoveForoganIDs(ids...)
	return ouo
}

// RemoveForogan removes forogan edges to Spaciality.
func (ouo *OrganUpdateOne) RemoveForogan(s ...*Spaciality) *OrganUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.RemoveForoganIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ouo *OrganUpdateOne) Save(ctx context.Context) (*Organ, error) {
	if v, ok := ouo.mutation.OrganName(); ok {
		if err := organ.OrganNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "OrganName", err: fmt.Errorf("ent: validator failed for field \"OrganName\": %w", err)}
		}
	}

	var (
		err  error
		node *Organ
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrganMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganUpdateOne) SaveX(ctx context.Context) *Organ {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *OrganUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrganUpdateOne) sqlSave(ctx context.Context) (o *Organ, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   organ.Table,
			Columns: organ.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organ.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Organ.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.OrganName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: organ.FieldOrganName,
		})
	}
	if nodes := ouo.mutation.RemovedForoganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organ.ForoganTable,
			Columns: []string{organ.ForoganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spaciality.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ForoganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organ.ForoganTable,
			Columns: []string{organ.ForoganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: spaciality.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	o = &Organ{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organ.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
