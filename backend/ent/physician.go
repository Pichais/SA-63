// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Pichais/app/ent/physician"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Physician is the model entity for the Physician schema.
type Physician struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PhysicianName holds the value of the "PhysicianName" field.
	PhysicianName string `json:"PhysicianName,omitempty"`
	// PhysicianEmail holds the value of the "PhysicianEmail" field.
	PhysicianEmail string `json:"PhysicianEmail,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PhysicianQuery when eager-loading is set.
	Edges PhysicianEdges `json:"edges"`
}

// PhysicianEdges holds the relations/edges for other nodes in the graph.
type PhysicianEdges struct {
	// Foruser holds the value of the foruser edge.
	Foruser []*Spaciality
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ForuserOrErr returns the Foruser value or an error if the edge
// was not loaded in eager-loading.
func (e PhysicianEdges) ForuserOrErr() ([]*Spaciality, error) {
	if e.loadedTypes[0] {
		return e.Foruser, nil
	}
	return nil, &NotLoadedError{edge: "foruser"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Physician) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // PhysicianName
		&sql.NullString{}, // PhysicianEmail
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Physician fields.
func (ph *Physician) assignValues(values ...interface{}) error {
	if m, n := len(values), len(physician.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ph.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PhysicianName", values[0])
	} else if value.Valid {
		ph.PhysicianName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PhysicianEmail", values[1])
	} else if value.Valid {
		ph.PhysicianEmail = value.String
	}
	return nil
}

// QueryForuser queries the foruser edge of the Physician.
func (ph *Physician) QueryForuser() *SpacialityQuery {
	return (&PhysicianClient{config: ph.config}).QueryForuser(ph)
}

// Update returns a builder for updating this Physician.
// Note that, you need to call Physician.Unwrap() before calling this method, if this Physician
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *Physician) Update() *PhysicianUpdateOne {
	return (&PhysicianClient{config: ph.config}).UpdateOne(ph)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ph *Physician) Unwrap() *Physician {
	tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: Physician is not a transactional entity")
	}
	ph.config.driver = tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *Physician) String() string {
	var builder strings.Builder
	builder.WriteString("Physician(")
	builder.WriteString(fmt.Sprintf("id=%v", ph.ID))
	builder.WriteString(", PhysicianName=")
	builder.WriteString(ph.PhysicianName)
	builder.WriteString(", PhysicianEmail=")
	builder.WriteString(ph.PhysicianEmail)
	builder.WriteByte(')')
	return builder.String()
}

// Physicians is a parsable slice of Physician.
type Physicians []*Physician

func (ph Physicians) config(cfg config) {
	for _i := range ph {
		ph[_i].config = cfg
	}
}
