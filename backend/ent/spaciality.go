// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Pichais/app/ent/organ"
	"github.com/Pichais/app/ent/physician"
	"github.com/Pichais/app/ent/spaciality"
	"github.com/Pichais/app/ent/typedisease"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Spaciality is the model entity for the Spaciality schema.
type Spaciality struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpacialityQuery when eager-loading is set.
	Edges                SpacialityEdges `json:"edges"`
	organ_forogan        *int
	physician_foruser    *int
	type_disease_fortype *int
}

// SpacialityEdges holds the relations/edges for other nodes in the graph.
type SpacialityEdges struct {
	// User holds the value of the user edge.
	User *Physician
	// Ogan holds the value of the ogan edge.
	Ogan *Organ
	// Type holds the value of the type edge.
	Type *TypeDisease
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpacialityEdges) UserOrErr() (*Physician, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: physician.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OganOrErr returns the Ogan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpacialityEdges) OganOrErr() (*Organ, error) {
	if e.loadedTypes[1] {
		if e.Ogan == nil {
			// The edge ogan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: organ.Label}
		}
		return e.Ogan, nil
	}
	return nil, &NotLoadedError{edge: "ogan"}
}

// TypeOrErr returns the Type value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpacialityEdges) TypeOrErr() (*TypeDisease, error) {
	if e.loadedTypes[2] {
		if e.Type == nil {
			// The edge type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: typedisease.Label}
		}
		return e.Type, nil
	}
	return nil, &NotLoadedError{edge: "type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Spaciality) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Spaciality) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // organ_forogan
		&sql.NullInt64{}, // physician_foruser
		&sql.NullInt64{}, // type_disease_fortype
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Spaciality fields.
func (s *Spaciality) assignValues(values ...interface{}) error {
	if m, n := len(values), len(spaciality.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(spaciality.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field organ_forogan", value)
		} else if value.Valid {
			s.organ_forogan = new(int)
			*s.organ_forogan = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field physician_foruser", value)
		} else if value.Valid {
			s.physician_foruser = new(int)
			*s.physician_foruser = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field type_disease_fortype", value)
		} else if value.Valid {
			s.type_disease_fortype = new(int)
			*s.type_disease_fortype = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Spaciality.
func (s *Spaciality) QueryUser() *PhysicianQuery {
	return (&SpacialityClient{config: s.config}).QueryUser(s)
}

// QueryOgan queries the ogan edge of the Spaciality.
func (s *Spaciality) QueryOgan() *OrganQuery {
	return (&SpacialityClient{config: s.config}).QueryOgan(s)
}

// QueryType queries the type edge of the Spaciality.
func (s *Spaciality) QueryType() *TypeDiseaseQuery {
	return (&SpacialityClient{config: s.config}).QueryType(s)
}

// Update returns a builder for updating this Spaciality.
// Note that, you need to call Spaciality.Unwrap() before calling this method, if this Spaciality
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Spaciality) Update() *SpacialityUpdateOne {
	return (&SpacialityClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Spaciality) Unwrap() *Spaciality {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Spaciality is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Spaciality) String() string {
	var builder strings.Builder
	builder.WriteString("Spaciality(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Spacialities is a parsable slice of Spaciality.
type Spacialities []*Spaciality

func (s Spacialities) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
