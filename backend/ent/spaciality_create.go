// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Pichais/app/ent/organ"
	"github.com/Pichais/app/ent/physician"
	"github.com/Pichais/app/ent/spaciality"
	"github.com/Pichais/app/ent/typedisease"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SpacialityCreate is the builder for creating a Spaciality entity.
type SpacialityCreate struct {
	config
	mutation *SpacialityMutation
	hooks    []Hook
}

// SetUserID sets the user edge to Physician by id.
func (sc *SpacialityCreate) SetUserID(id int) *SpacialityCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetNillableUserID sets the user edge to Physician by id if the given value is not nil.
func (sc *SpacialityCreate) SetNillableUserID(id *int) *SpacialityCreate {
	if id != nil {
		sc = sc.SetUserID(*id)
	}
	return sc
}

// SetUser sets the user edge to Physician.
func (sc *SpacialityCreate) SetUser(p *Physician) *SpacialityCreate {
	return sc.SetUserID(p.ID)
}

// SetOganID sets the ogan edge to Organ by id.
func (sc *SpacialityCreate) SetOganID(id int) *SpacialityCreate {
	sc.mutation.SetOganID(id)
	return sc
}

// SetNillableOganID sets the ogan edge to Organ by id if the given value is not nil.
func (sc *SpacialityCreate) SetNillableOganID(id *int) *SpacialityCreate {
	if id != nil {
		sc = sc.SetOganID(*id)
	}
	return sc
}

// SetOgan sets the ogan edge to Organ.
func (sc *SpacialityCreate) SetOgan(o *Organ) *SpacialityCreate {
	return sc.SetOganID(o.ID)
}

// SetTypeID sets the type edge to TypeDisease by id.
func (sc *SpacialityCreate) SetTypeID(id int) *SpacialityCreate {
	sc.mutation.SetTypeID(id)
	return sc
}

// SetNillableTypeID sets the type edge to TypeDisease by id if the given value is not nil.
func (sc *SpacialityCreate) SetNillableTypeID(id *int) *SpacialityCreate {
	if id != nil {
		sc = sc.SetTypeID(*id)
	}
	return sc
}

// SetType sets the type edge to TypeDisease.
func (sc *SpacialityCreate) SetType(t *TypeDisease) *SpacialityCreate {
	return sc.SetTypeID(t.ID)
}

// Mutation returns the SpacialityMutation object of the builder.
func (sc *SpacialityCreate) Mutation() *SpacialityMutation {
	return sc.mutation
}

// Save creates the Spaciality in the database.
func (sc *SpacialityCreate) Save(ctx context.Context) (*Spaciality, error) {
	var (
		err  error
		node *Spaciality
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpacialityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpacialityCreate) SaveX(ctx context.Context) *Spaciality {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SpacialityCreate) sqlSave(ctx context.Context) (*Spaciality, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SpacialityCreate) createSpec() (*Spaciality, *sqlgraph.CreateSpec) {
	var (
		s     = &Spaciality{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: spaciality.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spaciality.FieldID,
			},
		}
	)
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.UserTable,
			Columns: []string{spaciality.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.OganTable,
			Columns: []string{spaciality.OganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organ.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   spaciality.TypeTable,
			Columns: []string{spaciality.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typedisease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
