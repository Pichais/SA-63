// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Pichais/app/ent/migrate"

	"github.com/Pichais/app/ent/organ"
	"github.com/Pichais/app/ent/physician"
	"github.com/Pichais/app/ent/spaciality"
	"github.com/Pichais/app/ent/typedisease"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Organ is the client for interacting with the Organ builders.
	Organ *OrganClient
	// Physician is the client for interacting with the Physician builders.
	Physician *PhysicianClient
	// Spaciality is the client for interacting with the Spaciality builders.
	Spaciality *SpacialityClient
	// TypeDisease is the client for interacting with the TypeDisease builders.
	TypeDisease *TypeDiseaseClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Organ = NewOrganClient(c.config)
	c.Physician = NewPhysicianClient(c.config)
	c.Spaciality = NewSpacialityClient(c.config)
	c.TypeDisease = NewTypeDiseaseClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Organ:       NewOrganClient(cfg),
		Physician:   NewPhysicianClient(cfg),
		Spaciality:  NewSpacialityClient(cfg),
		TypeDisease: NewTypeDiseaseClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:      cfg,
		Organ:       NewOrganClient(cfg),
		Physician:   NewPhysicianClient(cfg),
		Spaciality:  NewSpacialityClient(cfg),
		TypeDisease: NewTypeDiseaseClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Organ.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Organ.Use(hooks...)
	c.Physician.Use(hooks...)
	c.Spaciality.Use(hooks...)
	c.TypeDisease.Use(hooks...)
}

// OrganClient is a client for the Organ schema.
type OrganClient struct {
	config
}

// NewOrganClient returns a client for the Organ from the given config.
func NewOrganClient(c config) *OrganClient {
	return &OrganClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organ.Hooks(f(g(h())))`.
func (c *OrganClient) Use(hooks ...Hook) {
	c.hooks.Organ = append(c.hooks.Organ, hooks...)
}

// Create returns a create builder for Organ.
func (c *OrganClient) Create() *OrganCreate {
	mutation := newOrganMutation(c.config, OpCreate)
	return &OrganCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Organ.
func (c *OrganClient) Update() *OrganUpdate {
	mutation := newOrganMutation(c.config, OpUpdate)
	return &OrganUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganClient) UpdateOne(o *Organ) *OrganUpdateOne {
	mutation := newOrganMutation(c.config, OpUpdateOne, withOrgan(o))
	return &OrganUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganClient) UpdateOneID(id int) *OrganUpdateOne {
	mutation := newOrganMutation(c.config, OpUpdateOne, withOrganID(id))
	return &OrganUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organ.
func (c *OrganClient) Delete() *OrganDelete {
	mutation := newOrganMutation(c.config, OpDelete)
	return &OrganDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrganClient) DeleteOne(o *Organ) *OrganDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrganClient) DeleteOneID(id int) *OrganDeleteOne {
	builder := c.Delete().Where(organ.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganDeleteOne{builder}
}

// Create returns a query builder for Organ.
func (c *OrganClient) Query() *OrganQuery {
	return &OrganQuery{config: c.config}
}

// Get returns a Organ entity by its id.
func (c *OrganClient) Get(ctx context.Context, id int) (*Organ, error) {
	return c.Query().Where(organ.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganClient) GetX(ctx context.Context, id int) *Organ {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryForogan queries the forogan edge of a Organ.
func (c *OrganClient) QueryForogan(o *Organ) *SpacialityQuery {
	query := &SpacialityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organ.Table, organ.FieldID, id),
			sqlgraph.To(spaciality.Table, spaciality.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organ.ForoganTable, organ.ForoganColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganClient) Hooks() []Hook {
	return c.hooks.Organ
}

// PhysicianClient is a client for the Physician schema.
type PhysicianClient struct {
	config
}

// NewPhysicianClient returns a client for the Physician from the given config.
func NewPhysicianClient(c config) *PhysicianClient {
	return &PhysicianClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `physician.Hooks(f(g(h())))`.
func (c *PhysicianClient) Use(hooks ...Hook) {
	c.hooks.Physician = append(c.hooks.Physician, hooks...)
}

// Create returns a create builder for Physician.
func (c *PhysicianClient) Create() *PhysicianCreate {
	mutation := newPhysicianMutation(c.config, OpCreate)
	return &PhysicianCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Physician.
func (c *PhysicianClient) Update() *PhysicianUpdate {
	mutation := newPhysicianMutation(c.config, OpUpdate)
	return &PhysicianUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhysicianClient) UpdateOne(ph *Physician) *PhysicianUpdateOne {
	mutation := newPhysicianMutation(c.config, OpUpdateOne, withPhysician(ph))
	return &PhysicianUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhysicianClient) UpdateOneID(id int) *PhysicianUpdateOne {
	mutation := newPhysicianMutation(c.config, OpUpdateOne, withPhysicianID(id))
	return &PhysicianUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Physician.
func (c *PhysicianClient) Delete() *PhysicianDelete {
	mutation := newPhysicianMutation(c.config, OpDelete)
	return &PhysicianDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PhysicianClient) DeleteOne(ph *Physician) *PhysicianDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PhysicianClient) DeleteOneID(id int) *PhysicianDeleteOne {
	builder := c.Delete().Where(physician.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhysicianDeleteOne{builder}
}

// Create returns a query builder for Physician.
func (c *PhysicianClient) Query() *PhysicianQuery {
	return &PhysicianQuery{config: c.config}
}

// Get returns a Physician entity by its id.
func (c *PhysicianClient) Get(ctx context.Context, id int) (*Physician, error) {
	return c.Query().Where(physician.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhysicianClient) GetX(ctx context.Context, id int) *Physician {
	ph, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ph
}

// QueryForuser queries the foruser edge of a Physician.
func (c *PhysicianClient) QueryForuser(ph *Physician) *SpacialityQuery {
	query := &SpacialityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physician.Table, physician.FieldID, id),
			sqlgraph.To(spaciality.Table, spaciality.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, physician.ForuserTable, physician.ForuserColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhysicianClient) Hooks() []Hook {
	return c.hooks.Physician
}

// SpacialityClient is a client for the Spaciality schema.
type SpacialityClient struct {
	config
}

// NewSpacialityClient returns a client for the Spaciality from the given config.
func NewSpacialityClient(c config) *SpacialityClient {
	return &SpacialityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `spaciality.Hooks(f(g(h())))`.
func (c *SpacialityClient) Use(hooks ...Hook) {
	c.hooks.Spaciality = append(c.hooks.Spaciality, hooks...)
}

// Create returns a create builder for Spaciality.
func (c *SpacialityClient) Create() *SpacialityCreate {
	mutation := newSpacialityMutation(c.config, OpCreate)
	return &SpacialityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Spaciality.
func (c *SpacialityClient) Update() *SpacialityUpdate {
	mutation := newSpacialityMutation(c.config, OpUpdate)
	return &SpacialityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpacialityClient) UpdateOne(s *Spaciality) *SpacialityUpdateOne {
	mutation := newSpacialityMutation(c.config, OpUpdateOne, withSpaciality(s))
	return &SpacialityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpacialityClient) UpdateOneID(id int) *SpacialityUpdateOne {
	mutation := newSpacialityMutation(c.config, OpUpdateOne, withSpacialityID(id))
	return &SpacialityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Spaciality.
func (c *SpacialityClient) Delete() *SpacialityDelete {
	mutation := newSpacialityMutation(c.config, OpDelete)
	return &SpacialityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SpacialityClient) DeleteOne(s *Spaciality) *SpacialityDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SpacialityClient) DeleteOneID(id int) *SpacialityDeleteOne {
	builder := c.Delete().Where(spaciality.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpacialityDeleteOne{builder}
}

// Create returns a query builder for Spaciality.
func (c *SpacialityClient) Query() *SpacialityQuery {
	return &SpacialityQuery{config: c.config}
}

// Get returns a Spaciality entity by its id.
func (c *SpacialityClient) Get(ctx context.Context, id int) (*Spaciality, error) {
	return c.Query().Where(spaciality.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpacialityClient) GetX(ctx context.Context, id int) *Spaciality {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryUser queries the user edge of a Spaciality.
func (c *SpacialityClient) QueryUser(s *Spaciality) *PhysicianQuery {
	query := &PhysicianQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spaciality.Table, spaciality.FieldID, id),
			sqlgraph.To(physician.Table, physician.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, spaciality.UserTable, spaciality.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOgan queries the ogan edge of a Spaciality.
func (c *SpacialityClient) QueryOgan(s *Spaciality) *OrganQuery {
	query := &OrganQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spaciality.Table, spaciality.FieldID, id),
			sqlgraph.To(organ.Table, organ.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, spaciality.OganTable, spaciality.OganColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryType queries the type edge of a Spaciality.
func (c *SpacialityClient) QueryType(s *Spaciality) *TypeDiseaseQuery {
	query := &TypeDiseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(spaciality.Table, spaciality.FieldID, id),
			sqlgraph.To(typedisease.Table, typedisease.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, spaciality.TypeTable, spaciality.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SpacialityClient) Hooks() []Hook {
	return c.hooks.Spaciality
}

// TypeDiseaseClient is a client for the TypeDisease schema.
type TypeDiseaseClient struct {
	config
}

// NewTypeDiseaseClient returns a client for the TypeDisease from the given config.
func NewTypeDiseaseClient(c config) *TypeDiseaseClient {
	return &TypeDiseaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `typedisease.Hooks(f(g(h())))`.
func (c *TypeDiseaseClient) Use(hooks ...Hook) {
	c.hooks.TypeDisease = append(c.hooks.TypeDisease, hooks...)
}

// Create returns a create builder for TypeDisease.
func (c *TypeDiseaseClient) Create() *TypeDiseaseCreate {
	mutation := newTypeDiseaseMutation(c.config, OpCreate)
	return &TypeDiseaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for TypeDisease.
func (c *TypeDiseaseClient) Update() *TypeDiseaseUpdate {
	mutation := newTypeDiseaseMutation(c.config, OpUpdate)
	return &TypeDiseaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TypeDiseaseClient) UpdateOne(td *TypeDisease) *TypeDiseaseUpdateOne {
	mutation := newTypeDiseaseMutation(c.config, OpUpdateOne, withTypeDisease(td))
	return &TypeDiseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TypeDiseaseClient) UpdateOneID(id int) *TypeDiseaseUpdateOne {
	mutation := newTypeDiseaseMutation(c.config, OpUpdateOne, withTypeDiseaseID(id))
	return &TypeDiseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TypeDisease.
func (c *TypeDiseaseClient) Delete() *TypeDiseaseDelete {
	mutation := newTypeDiseaseMutation(c.config, OpDelete)
	return &TypeDiseaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TypeDiseaseClient) DeleteOne(td *TypeDisease) *TypeDiseaseDeleteOne {
	return c.DeleteOneID(td.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TypeDiseaseClient) DeleteOneID(id int) *TypeDiseaseDeleteOne {
	builder := c.Delete().Where(typedisease.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TypeDiseaseDeleteOne{builder}
}

// Create returns a query builder for TypeDisease.
func (c *TypeDiseaseClient) Query() *TypeDiseaseQuery {
	return &TypeDiseaseQuery{config: c.config}
}

// Get returns a TypeDisease entity by its id.
func (c *TypeDiseaseClient) Get(ctx context.Context, id int) (*TypeDisease, error) {
	return c.Query().Where(typedisease.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TypeDiseaseClient) GetX(ctx context.Context, id int) *TypeDisease {
	td, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return td
}

// QueryFortype queries the fortype edge of a TypeDisease.
func (c *TypeDiseaseClient) QueryFortype(td *TypeDisease) *SpacialityQuery {
	query := &SpacialityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := td.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(typedisease.Table, typedisease.FieldID, id),
			sqlgraph.To(spaciality.Table, spaciality.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, typedisease.FortypeTable, typedisease.FortypeColumn),
		)
		fromV = sqlgraph.Neighbors(td.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TypeDiseaseClient) Hooks() []Hook {
	return c.hooks.TypeDisease
}
