/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersSpaciality,
    ControllersSpacialityFromJSON,
    ControllersSpacialityToJSON,
    EntOrgan,
    EntOrganFromJSON,
    EntOrganToJSON,
    EntPhysician,
    EntPhysicianFromJSON,
    EntPhysicianToJSON,
    EntSpaciality,
    EntSpacialityFromJSON,
    EntSpacialityToJSON,
    EntTypeDisease,
    EntTypeDiseaseFromJSON,
    EntTypeDiseaseToJSON,
} from '../models';

export interface CreateOrganRequest {
    organ: EntOrgan;
}

export interface CreatePhysicianRequest {
    physician: EntPhysician;
}

export interface CreateSpacialityRequest {
    spaciality: ControllersSpaciality;
}

export interface CreateTypediseaseRequest {
    typedisease: EntTypeDisease;
}

export interface DeleteOrganRequest {
    id: number;
}

export interface DeletePhysicianRequest {
    id: number;
}

export interface DeleteSpacialityRequest {
    id: number;
}

export interface DeleteTypediseaseRequest {
    id: number;
}

export interface GetOrganRequest {
    id: number;
}

export interface GetPhysicianRequest {
    id: number;
}

export interface GetTypediseaseRequest {
    id: number;
}

export interface ListOrganRequest {
    limit?: number;
    offset?: number;
}

export interface ListPhysicianRequest {
    limit?: number;
    offset?: number;
}

export interface ListSpacialityRequest {
    limit?: number;
    offset?: number;
}

export interface ListTypediseaseRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateOrganRequest {
    id: number;
    organ: EntOrgan;
}

export interface UpdatePhysicianRequest {
    id: number;
    physician: EntPhysician;
}

export interface UpdateTypediseaseRequest {
    id: number;
    typedisease: EntTypeDisease;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create organ
     * Create organ
     */
    async createOrganRaw(requestParameters: CreateOrganRequest): Promise<runtime.ApiResponse<EntOrgan>> {
        if (requestParameters.organ === null || requestParameters.organ === undefined) {
            throw new runtime.RequiredError('organ','Required parameter requestParameters.organ was null or undefined when calling createOrgan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntOrganToJSON(requestParameters.organ),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOrganFromJSON(jsonValue));
    }

    /**
     * Create organ
     * Create organ
     */
    async createOrgan(requestParameters: CreateOrganRequest): Promise<EntOrgan> {
        const response = await this.createOrganRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create physician
     * Create physician
     */
    async createPhysicianRaw(requestParameters: CreatePhysicianRequest): Promise<runtime.ApiResponse<EntPhysician>> {
        if (requestParameters.physician === null || requestParameters.physician === undefined) {
            throw new runtime.RequiredError('physician','Required parameter requestParameters.physician was null or undefined when calling createPhysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/physicians`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPhysicianToJSON(requestParameters.physician),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPhysicianFromJSON(jsonValue));
    }

    /**
     * Create physician
     * Create physician
     */
    async createPhysician(requestParameters: CreatePhysicianRequest): Promise<EntPhysician> {
        const response = await this.createPhysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create spaciality
     * Create spaciality
     */
    async createSpacialityRaw(requestParameters: CreateSpacialityRequest): Promise<runtime.ApiResponse<ControllersSpaciality>> {
        if (requestParameters.spaciality === null || requestParameters.spaciality === undefined) {
            throw new runtime.RequiredError('spaciality','Required parameter requestParameters.spaciality was null or undefined when calling createSpaciality.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/spacialitys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersSpacialityToJSON(requestParameters.spaciality),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersSpacialityFromJSON(jsonValue));
    }

    /**
     * Create spaciality
     * Create spaciality
     */
    async createSpaciality(requestParameters: CreateSpacialityRequest): Promise<ControllersSpaciality> {
        const response = await this.createSpacialityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create typedisease
     * Create typedisease
     */
    async createTypediseaseRaw(requestParameters: CreateTypediseaseRequest): Promise<runtime.ApiResponse<EntTypeDisease>> {
        if (requestParameters.typedisease === null || requestParameters.typedisease === undefined) {
            throw new runtime.RequiredError('typedisease','Required parameter requestParameters.typedisease was null or undefined when calling createTypedisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/typediseases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTypeDiseaseToJSON(requestParameters.typedisease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeDiseaseFromJSON(jsonValue));
    }

    /**
     * Create typedisease
     * Create typedisease
     */
    async createTypedisease(requestParameters: CreateTypediseaseRequest): Promise<EntTypeDisease> {
        const response = await this.createTypediseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get organ by ID
     * Delete a organ entity by ID
     */
    async deleteOrganRaw(requestParameters: DeleteOrganRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrgan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get organ by ID
     * Delete a organ entity by ID
     */
    async deleteOrgan(requestParameters: DeleteOrganRequest): Promise<object> {
        const response = await this.deleteOrganRaw(requestParameters);
        return await response.value();
    }

    /**
     * get physician by ID
     * Delete a physician entity by ID
     */
    async deletePhysicianRaw(requestParameters: DeletePhysicianRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePhysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/physicians/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get physician by ID
     * Delete a physician entity by ID
     */
    async deletePhysician(requestParameters: DeletePhysicianRequest): Promise<object> {
        const response = await this.deletePhysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * get spaciality by ID
     * Delete a spaciality entity by ID
     */
    async deleteSpacialityRaw(requestParameters: DeleteSpacialityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSpaciality.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spacialitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get spaciality by ID
     * Delete a spaciality entity by ID
     */
    async deleteSpaciality(requestParameters: DeleteSpacialityRequest): Promise<object> {
        const response = await this.deleteSpacialityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get typedisease by ID
     * Delete a typedisease entity by ID
     */
    async deleteTypediseaseRaw(requestParameters: DeleteTypediseaseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTypedisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typediseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get typedisease by ID
     * Delete a typedisease entity by ID
     */
    async deleteTypedisease(requestParameters: DeleteTypediseaseRequest): Promise<object> {
        const response = await this.deleteTypediseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get organ by ID
     * Get a organ entity by ID
     */
    async getOrganRaw(requestParameters: GetOrganRequest): Promise<runtime.ApiResponse<EntOrgan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrgan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOrganFromJSON(jsonValue));
    }

    /**
     * get organ by ID
     * Get a organ entity by ID
     */
    async getOrgan(requestParameters: GetOrganRequest): Promise<EntOrgan> {
        const response = await this.getOrganRaw(requestParameters);
        return await response.value();
    }

    /**
     * get physician by ID
     * Get a physician entity by ID
     */
    async getPhysicianRaw(requestParameters: GetPhysicianRequest): Promise<runtime.ApiResponse<EntPhysician>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPhysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/physicians/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPhysicianFromJSON(jsonValue));
    }

    /**
     * get physician by ID
     * Get a physician entity by ID
     */
    async getPhysician(requestParameters: GetPhysicianRequest): Promise<EntPhysician> {
        const response = await this.getPhysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * get typedisease by ID
     * Get a typedisease entity by ID
     */
    async getTypediseaseRaw(requestParameters: GetTypediseaseRequest): Promise<runtime.ApiResponse<EntTypeDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTypedisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typediseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeDiseaseFromJSON(jsonValue));
    }

    /**
     * get typedisease by ID
     * Get a typedisease entity by ID
     */
    async getTypedisease(requestParameters: GetTypediseaseRequest): Promise<EntTypeDisease> {
        const response = await this.getTypediseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list organ entities
     * List organ entities
     */
    async listOrganRaw(requestParameters: ListOrganRequest): Promise<runtime.ApiResponse<Array<EntOrgan>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOrganFromJSON));
    }

    /**
     * list organ entities
     * List organ entities
     */
    async listOrgan(requestParameters: ListOrganRequest): Promise<Array<EntOrgan>> {
        const response = await this.listOrganRaw(requestParameters);
        return await response.value();
    }

    /**
     * list physician entities
     * List physician entities
     */
    async listPhysicianRaw(requestParameters: ListPhysicianRequest): Promise<runtime.ApiResponse<Array<EntPhysician>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/physicians`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPhysicianFromJSON));
    }

    /**
     * list physician entities
     * List physician entities
     */
    async listPhysician(requestParameters: ListPhysicianRequest): Promise<Array<EntPhysician>> {
        const response = await this.listPhysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * list spaciality entities
     * List spaciality entities
     */
    async listSpacialityRaw(requestParameters: ListSpacialityRequest): Promise<runtime.ApiResponse<Array<EntSpaciality>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spacialitys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSpacialityFromJSON));
    }

    /**
     * list spaciality entities
     * List spaciality entities
     */
    async listSpaciality(requestParameters: ListSpacialityRequest): Promise<Array<EntSpaciality>> {
        const response = await this.listSpacialityRaw(requestParameters);
        return await response.value();
    }

    /**
     * list typedisease entities
     * List typedisease entities
     */
    async listTypediseaseRaw(requestParameters: ListTypediseaseRequest): Promise<runtime.ApiResponse<Array<EntTypeDisease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typediseases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTypeDiseaseFromJSON));
    }

    /**
     * list typedisease entities
     * List typedisease entities
     */
    async listTypedisease(requestParameters: ListTypediseaseRequest): Promise<Array<EntTypeDisease>> {
        const response = await this.listTypediseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update organ by ID
     * Update a organ entity by ID
     */
    async updateOrganRaw(requestParameters: UpdateOrganRequest): Promise<runtime.ApiResponse<EntOrgan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrgan.');
        }

        if (requestParameters.organ === null || requestParameters.organ === undefined) {
            throw new runtime.RequiredError('organ','Required parameter requestParameters.organ was null or undefined when calling updateOrgan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntOrganToJSON(requestParameters.organ),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOrganFromJSON(jsonValue));
    }

    /**
     * update organ by ID
     * Update a organ entity by ID
     */
    async updateOrgan(requestParameters: UpdateOrganRequest): Promise<EntOrgan> {
        const response = await this.updateOrganRaw(requestParameters);
        return await response.value();
    }

    /**
     * update physician by ID
     * Update a physician entity by ID
     */
    async updatePhysicianRaw(requestParameters: UpdatePhysicianRequest): Promise<runtime.ApiResponse<EntPhysician>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePhysician.');
        }

        if (requestParameters.physician === null || requestParameters.physician === undefined) {
            throw new runtime.RequiredError('physician','Required parameter requestParameters.physician was null or undefined when calling updatePhysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/physicians/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPhysicianToJSON(requestParameters.physician),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPhysicianFromJSON(jsonValue));
    }

    /**
     * update physician by ID
     * Update a physician entity by ID
     */
    async updatePhysician(requestParameters: UpdatePhysicianRequest): Promise<EntPhysician> {
        const response = await this.updatePhysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * update typedisease by ID
     * Update a typedisease entity by ID
     */
    async updateTypediseaseRaw(requestParameters: UpdateTypediseaseRequest): Promise<runtime.ApiResponse<EntTypeDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTypedisease.');
        }

        if (requestParameters.typedisease === null || requestParameters.typedisease === undefined) {
            throw new runtime.RequiredError('typedisease','Required parameter requestParameters.typedisease was null or undefined when calling updateTypedisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/typediseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntTypeDiseaseToJSON(requestParameters.typedisease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeDiseaseFromJSON(jsonValue));
    }

    /**
     * update typedisease by ID
     * Update a typedisease entity by ID
     */
    async updateTypedisease(requestParameters: UpdateTypediseaseRequest): Promise<EntTypeDisease> {
        const response = await this.updateTypediseaseRaw(requestParameters);
        return await response.value();
    }

}
